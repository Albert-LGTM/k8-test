apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    // This component discovers all pods in the Kubernetes cluster.
    // The role "pod" is used to specifically discover pods.
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    // This component relabels the discovered pods to create a clean set of labels.
    discovery.relabel "pod_labels" {
      targets = discovery.kubernetes.pods.targets
    
      rule {
        // Drop any labels with "__meta_kubernetes_pod_container_id"
        action = "labeldrop"
        regex  = "__meta_kubernetes_pod_container_id"
      }
    
      rule {
        // Map Kubernetes labels to standard labels.
        action = "labelmap"
        regex  = "__meta_kubernetes_pod_label_(.*)"
      }
    
      rule {
        // Rename the namespace label.
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
        action        = "replace"
      }
    
      rule {
        // Rename the pod name label.
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
        action        = "replace"
      }
    }
    
    // This component scrapes logs directly from Kubernetes pods using the relabeled targets.
    loki.source.kubernetes "pod_logs" {
      // Use the relabeled pods as the source for log scraping.
      targets = discovery.relabel.pod_labels.output
      
      // All logs from this source will be processed by the loki_pipeline.
      forward_to = [loki.process.loki_pipeline.receiver]
    }
    
    // This component processes logs before sending them to Loki.
    loki.process "loki_pipeline" {
      // All processed logs are forwarded to the Loki write component.
      forward_to = [loki.write.loki_push.receiver]
    }
    
    // This component writes logs to the Loki API.
    loki.write "loki_push" {
      endpoint {
        url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
      }
    }
    
    // This component scrapes Prometheus metrics from the discovered pods.
    prometheus.scrape "pod_metrics" {
      targets    = discovery.kubernetes.pods.targets
      forward_to = [prometheus.remote_write.prom_push.receiver]
    }
    
    // This component writes Prometheus metrics to the Prometheus remote write endpoint.
    prometheus.remote_write "prom_push" {
      endpoint {
        url = "http://prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      }
    }
